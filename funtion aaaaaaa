from hub import light_matrix, port
import motor
import motor_pair
import color
import color_sensor
import runloop
import math





speed = 20
kp = 1.4
left = 0
right = 0
cross = 0
wait_delay = 300
# for move forwards before green turn, adjust so degree moved makes it disatnce from wheel floor to black perpend line



async def detect_left():
    if color_sensor.reflection(port.B) <= 65:
            global left
            left = 1
            await runloop.sleep_ms(wait_delay)
            left = 0

async def detect_right():
    if color_sensor.reflection(port.F) <= 65:
            global right
            right = 1
            await runloop.sleep_ms(wait_delay)
            right = 0

async def detect_cross():
    if color_sensor.reflection(port.B) <= 65 and color_sensor.reflection(port.F) <= 65:
            global cross
            cross = 1
            await runloop.sleep_ms(wait_delay)
            cross = 0


async def detect_side():
    while True:
        detect_left
        detect_right
        detect_cross





async def black_left():
    if color_sensor.reflection(port.D) <= 65:
        motor_pair.move_tank(motor_pair.PAIR_1, 0, (math.ceil(kp*(color_sensor.reflection(port.D)-45)/100*1050))) #sharp adjust value of negative
        await runloop.sleep_ms(1)
    else:
        motor_pair.move_tank(motor_pair.PAIR_1, 0, (math.ceil(kp*(color_sensor.reflection(port.D)-60)/100*1050))) # curved adjust value of negative
        await runloop.sleep_ms(1)





async def black_right():
    if color_sensor.reflection(port.D) <= 65: # else aka right
        motor_pair.move_tank(motor_pair.PAIR_1, (math.ceil(kp*(color_sensor.reflection(port.D)-45)/100*1050)), 0) #sharp adjust value of negative
        await runloop.sleep_ms(1)
    else:
        motor_pair.move_tank(motor_pair.PAIR_1, (math.ceil(kp*(color_sensor.reflection(port.D)-60)/100*1050)), 0)# curved adjust value of negative
        await runloop.sleep_ms(1)





async def black_main():
    if color_sensor.reflection(port.B) <= 65 and color_sensor.reflection(port.F) <= 65:
                await motor_pair.move_for_degrees(motor_pair.PAIR_1, 64, 0, velocity=280, deceleration=10000) # dash cross adjust degree of distance (from center of wheel to center of sensor)
    elif color_sensor.reflection(port.B) <= 65 : # aka left
        black_left
    else:
        black_right





async def green_main():
    if color_sensor.reflection(port.B) in range(65, 80) and color_sensor.color(port.B) == 3 or -1 and color_sensor.reflection(port.F) in range(65, 80) and color_sensor.color(port.F) == 3 or -1:
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 64, 0, velocity=280, deceleration=10000) #adjust
        await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1, 360, 1000, -1000) # u turn 180 degrees adjust degree motor moved (math says radius from center of rotation to wheel / 9 then * 360)
        await runloop.sleep_ms(1)
    elif color_sensor.reflection(port.B) in range(65, 80) and color_sensor.color(port.B) == 3 or -1:
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 64, 0, velocity=280, deceleration=10000) # adjust
        await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1, 180, -1000, 1000) # left 90 degrees adjust degree motor moved (math says radius from center of rotation to wheel / 9 then * 180)
        await runloop.sleep_ms(1)
    elif color_sensor.reflection(port.F) in range(65, 80) and color_sensor.color(port.F) == 3 or -1:
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 64, 0, velocity=280, deceleration=10000) # adjust
        await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1, 180, 1000, -1000) # right 90 degrees adjust degree motor moved (math says radius from center of rotation to wheel / 9 then * 180)
        await runloop.sleep_ms(1)





async def overshoots():
    if left == 1:
        motor_pair.move_tank(motor_pair.PAIR_1, 0, 400) # overshoot left
        await runloop.sleep_ms(1)
    elif right == 1:
        motor_pair.move_tank(motor_pair.PAIR_1, 400, 0) # overshoot right
        await runloop.sleep_ms(1)





async def forwards():
    if color_sensor.reflection(port.D) <= 65:
            motor_pair.move_tank(motor_pair.PAIR_1, 315, 315) # forwards
            await runloop.sleep_ms(1)





async def main():
    motor_pair.pair(motor_pair.PAIR_1,port.A, port.E)

    if color_sensor.reflection(port.B) < 90 or color_sensor.reflection(port.F) < 90:
        if color_sensor.reflection(port.B) <= 65 or color_sensor.reflection(port.F) <= 65:
            black_main
        else:
            green_main
    else:
        overshoots
        forwards




runloop.run( detect_side(), main() )
