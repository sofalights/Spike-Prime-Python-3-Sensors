from hub import light_matrix, port
import motor
import motor_pair
import color
import color_sensor
import runloop
import math

# personal: scroll to top, set zoom to when normal console extended cuts line 21.



speed = 20
kp = 1.4
left = 0
right = 0
cross = 0
wait_delay = 300
# for move forwards before green turn, adjust so degree moved makes it disatnce from wheel floor to black perpend line
motor.reset_relative_position(port.A, 0)
motor.reset_relative_position(port.E, 0)

async def main():
    motor_pair.pair(motor_pair.PAIR_1,port.A, port.E)
    while True:
        if color_sensor.reflection(port.B) < 90 or color_sensor.reflection(port.F) < 90:
            if color_sensor.reflection(port.B) <= 65 or color_sensor.reflection(port.F) <= 65:
                if color_sensor.reflection(port.B) <= 65 and color_sensor.reflection(port.F) <= 65:
                    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 64, 0, velocity=280, acceleration = 4750, deceleration=10000) # dash cross adjust degree of distance (from center of wheel to center of sensor)
                elif color_sensor.reflection(port.B) <= 65 : # aka left
                    if color_sensor.reflection(port.D) <= 65:
                        motor_pair.move_tank(motor_pair.PAIR_1, -69, (math.ceil(kp*(color_sensor.reflection(port.D)-40)/100*1050)) , acceleration = 4750) #sharp adjust value of negative
                        if color_sensor.reflection(port.B) <= 65 and color_sensor.reflection(port.F) <= 65 and left == 1:
                            motor_pair.move_tank(motor_pair.PAIR_1, (math.ceil(kp*(color_sensor.reflection(port.D)-40)/100*1050)), -69, acceleration = 4750)# sharp right
                    else:
                        motor_pair.move_tank(motor_pair.PAIR_1, -69, (math.ceil(kp*(color_sensor.reflection(port.D)-50)/100*1050)) , acceleration = 4750) # curved adjust value of negative
                else:
                    if color_sensor.reflection(port.D) <= 65: # else aka right
                        motor_pair.move_tank(motor_pair.PAIR_1, (math.ceil(kp*(color_sensor.reflection(port.D)-40)/100*1050)), -69, acceleration = 4750) #sharp adjust value of negative
                        if color_sensor.reflection(port.F) <= 65 and color_sensor.reflection(port.B) <= 65 and right == 1:
                            motor_pair.move_tank(motor_pair.PAIR_1, -69, (math.ceil(kp*(color_sensor.reflection(port.D)-40)/100*1050)) , acceleration = 4750)# sharp left
                    else:
                        motor_pair.move_tank(motor_pair.PAIR_1, (math.ceil(kp*(color_sensor.reflection(port.D)-50)/100*1050)), -69, acceleration = 4750)# curved adjust value of negative
        else:
            if left == 1:
                motor_pair.move_tank(motor_pair.PAIR_1, 0, 450, acceleration = 5000) # overshoot left
            elif right == 1:
                motor_pair.move_tank(motor_pair.PAIR_1, 450, 0, acceleration = 5000) # overshoot right
            elif color_sensor.reflection(port.D) <= 65:
                motor_pair.move_tank(motor_pair.PAIR_1, 520, 520, acceleration = 4750) # forwards

async def green_main():
    while True:
        if color_sensor.reflection(port.B) in range(65, 80) and color_sensor.color(port.B) == 3 or -1 and color_sensor.reflection(port.F) in range(65, 80) and color_sensor.color(port.F) == 3 or -1:
            await motor_pair.move_for_degrees(motor_pair.PAIR_1, 64, 0, velocity=280, stop = motor.SMART_BRAKE, acceleration = 4750, deceleration=10000) #adjust
            await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1, 360, 1000, -1000) # u turn 180 degrees adjust degree motor moved (math says radius from center of rotation to wheel in cm / 9 then * 360)
            await runloop.sleep_ms(1)
        elif color_sensor.reflection(port.B) in range(65, 80) and color_sensor.color(port.B) == 3 or -1 and color_sensor.reflection(port.F) >= 90:
            await motor_pair.move_for_degrees(motor_pair.PAIR_1, 64, 0, velocity=280, stop = motor.SMART_BRAKE, acceleration = 4750, deceleration=10000) # adjust
            await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1, 180, -1000, 1000) # left 90 degrees adjust degree motor moved (math says radius from center of rotation to wheel in cm / 9 then * 180)
            await runloop.sleep_ms(1)
        elif color_sensor.reflection(port.F) in range(65, 80) and color_sensor.color(port.F) == 3 or -1 and color_sensor.reflection(port.B) >= 90:
            await motor_pair.move_for_degrees(motor_pair.PAIR_1, 64, 0, velocity=280, stop = motor.SMART_BRAKE, acceleration = 4750, deceleration=10000) # adjust
            await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1, 180, 1000, -1000) # right 90 degrees adjust degree motor moved (math says radius from center of rotation to wheel in cm / 9 then * 180)
            await runloop.sleep_ms(1)

async def detect_side():
    while True:
        if color_sensor.reflection(port.B) <= 65:
            global left
            left = 1
            await runloop.sleep_ms(wait_delay)
            left = 0
        elif color_sensor.reflection(port.F) <= 65:
            global right
            right = 1
            await runloop.sleep_ms(wait_delay)
            right = 0
        elif color_sensor.reflection(port.B) <= 65 and color_sensor.reflection(port.F) <= 65:
            global cross
            cross = 1
            await runloop.sleep_ms(wait_delay)
            cross = 0

runloop.run( main() , green_main() , detect_side() )

